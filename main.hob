import "vec2d.hob" as vec2d;
import "ray.hob" as ray;
import "raylib.hob" as rl;
import "wall.hob" as wall;
import "level.hob" as level;
# import "../hoblang/examples/std/process.hob" as process;
# import "../hoblang/examples/std/io.hob" as io;
# TODO: stucks with io
# TODO: include paths
# lib <name>;

use vec2d::Vec2D;

fun main() -> i32 {
    var bg_color = rl::rgba(0x20, 0x20, 0x20, 0xff);
    var accent_color = rl::rgba(0xdd, 0x20, 0x20, 0xff);
    var player_size = 15.0;

    var title = "hello, world!\0";
    var width = 800;
    var height = 800;
    rl::init_window(width, height, title.raw);

    var position = vec2d::new((width / 2) as f32, (height / 2) as f32);
    var walls = {
        wall::from_ends(
            vec2d::new(10.0, 10.0),
            vec2d::new(10.0, width as f32 - 10.0)
        ),
        wall::from_ends(
            vec2d::new(10.0, 10.0),
            vec2d::new(width as f32 - 10.0, 10.0)
        ),
        wall::from_ends(
            vec2d::new((width * 4 / 5) as f32, (height * 2 / 3) as f32),
            vec2d::new((width * 2 / 3) as f32, (height * 4 / 5) as f32)
        ),
        wall::from_ends(
            vec2d::new((width * 1 / 5) as f32, (height * 1 / 3) as f32),
            vec2d::new((width * 1 / 3) as f32, (height * 1 / 5) as f32)
        )
    };
    var l = level::new(&walls as []wall::Wall);
    while !rl::window_should_close() {
        var mouse = rl::get_mouse_pos();

        if rl::is_mouse_button_pressed(rl::MOUSE_BUTTON_LEFT) {
            position = mouse;
        }

        rl::begin_drawing();
        rl::clear_bakground(bg_color);
        rl::draw_circle(position, player_size, accent_color);
        rl::draw_circle(mouse, 10.0, accent_color);
        
        var i = 0;
        while i < l.walls.length {
            var w = l.walls[i];
            rl::draw_line(w.a, w.b, accent_color);
            i = i + 1;
        }

        var mouse_pos = mouse.minus(position);
        if mouse_pos.length() > player_size {
            var mouse_ray = ray::new(position, mouse);
            var intersect: Vec2D;
            if l.ray_cast(mouse_ray, &intersect) {
                rl::draw_circle(intersect, 5.0, accent_color);
                rl::draw_line(position, intersect, accent_color);
            } else {
                if mouse_ray.dir.x > 0.0 {
                    rl::draw_line(position, vec2d::new(width as f32, mouse_ray.line.at(width as f32)), accent_color);
                } else {
                    rl::draw_line(position, vec2d::new(0.0, mouse_ray.line.at(0.0)), accent_color);
                }
            }
        }

        rl::end_drawing();
    }
    return 0;
}
