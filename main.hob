import "vec2d.hob" as vec2d;
import "ray.hob" as ray;
import "raylib.hob" as rl;
import "wall.hob" as wall;
import "line.hob" as line;
import "level.hob" as level;
# import "../hoblang/examples/std/process.hob" as process;
# import "../hoblang/examples/std/io.hob" as io;
# TODO: stucks with io
# TODO: include paths
# lib <name>;

use vec2d::Vec2D;

fun main() -> i32 {
    var bg_color = rl::rgba(0x20, 0x20, 0x20, 0xff);
    var accent_color = rl::rgba(0xdd, 0x20, 0x20, 0xff);
    var gray_color = rl::rgba(0x10, 0x10, 0x10, 0xff);
    var light_gray_color = rl::rgba(0x80, 0x80, 0x80, 0xff);
    var cp_distance = 15.0;
    var cp_size = 30.0;
    var rays_count = 80;
    var player_size = cp_distance;
    var max_dist = 1000.0;

    var title = "hello, world!\0";
    var width = 800;
    var height = 800;
    rl::init_window(width, height, title.raw);

    var position = vec2d::new((width / 2) as f32, (height / 2) as f32);
    var walls = {
        wall::from_ends(
            vec2d::new(10.0, 10.0),
            vec2d::new(10.0, width as f32 - 10.0)
        ),
        wall::from_ends(
            vec2d::new(10.0, 10.0),
            vec2d::new(width as f32 - 10.0, 10.0)
        ),
        wall::from_ends(
            vec2d::new((width * 4 / 5) as f32, (height * 2 / 3) as f32),
            vec2d::new((width * 2 / 3) as f32, (height * 4 / 5) as f32)
        ),
        wall::from_ends(
            vec2d::new((width * 1 / 5) as f32, (height * 1 / 3) as f32),
            vec2d::new((width * 1 / 3) as f32, (height * 1 / 5) as f32)
        )
    };
    var l = level::new(&walls as []wall::Wall);
    while !rl::window_should_close() {
        var mouse = rl::get_mouse_pos();

        if rl::is_mouse_button_pressed(rl::MOUSE_BUTTON_LEFT) {
            position = mouse;
        }

        rl::begin_drawing();
        rl::clear_bakground(bg_color);
        # rl::draw_circle(mouse, 10.0, accent_color);

        var mouse_delta = mouse.minus(position); # TODO: inner path in consts
        if mouse_delta.length() > player_size {
            var cp_dir = mouse_delta.mul(1.0 / mouse_delta.length());
            var cp_dir_norm = cp_dir.norm();
            var cp_line = line::from_pos_vec2d(position, cp_dir); # TODO: inner path in consts
            var cp_normal = cp_line.normal();
            var normal = cp_normal.norm();
            var cp = normal.mul(cp_size as f32);
            var cps = normal.mul(-cp.length() / rays_count as f32);
            var cp_start = cp_dir_norm.mul(cp_distance);
            cp_start = cp_start.add(cp.mul(0.5));
            var i = 0;
            while i < rays_count {
                var cur_ray = ray::new(position, cp_start.add(cps.mul(i as f32)));
                var intersection = l.ray_cast(cur_ray);
                if intersection.success {
                    var cp_line2 = line::from_pos_vec2d(position, cp.mul(1.0)); # TODO: inner path in consts
                    var distance = cp_line2.dist_from(intersection.pos);
                    # rl::draw_circle(intersection, 5.0, accent_color);
                    # rl::draw_line(
                    #     vec2d::new(0.0, cp_line2.at(0.0)),
                    #     vec2d::new(800.0, cp_line2.at(800.0)),
                    #     accent_color
                    # );
                    var lh = height as f32 * (1.0 - distance / max_dist);
                    var lx = (width * i / rays_count) as f32;
                    rl::draw_line(
                        vec2d::new(lx, (height as f32 - lh) / 2.0),
                        vec2d::new(lx, (height as f32 + lh) / 2.0),
                        light_gray_color.move_to(gray_color, distance / max_dist)
                    );
                    rl::draw_line(position, intersection.pos, light_gray_color);
                } else {
                    if cur_ray.dir.x > 0.0 {
                        rl::draw_line(position, vec2d::new(width as f32, cur_ray.line.at(width as f32)), gray_color);
                    } else if cur_ray.dir.x < 0.001 && cur_ray.dir.x > -0.001 {
                        if cur_ray.dir.y > 0.0 {
                            rl::draw_line(position, vec2d::new(position.x, height as f32), gray_color);
                        } else {
                            rl::draw_line(position, vec2d::new(position.x, 0.0), gray_color);
                        }
                    } else {
                        rl::draw_line(position, vec2d::new(0.0, cur_ray.line.at(0.0)), gray_color);
                    }
                }
                i = i + 1;
            }
        }
        
        var i = 0;
        while i < l.walls.length {
            var w = l.walls[i];
            rl::draw_line(w.a, w.b, accent_color);
            i = i + 1;
        }

        rl::draw_circle(position, player_size, accent_color);

        rl::end_drawing();
    }
    return 0;
}
