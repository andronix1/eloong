import "vec2d.hob" as vec2d;

use vec2d::Vec2D;

extern(InitWindow) fun init_window(size: i32, width: i32, title: *u8) -> void

extern(WindowShouldClose) fun window_should_close() -> bool

extern(BeginDrawing) fun begin_drawing() -> void
extern(EndDrawing) fun end_drawing() -> void

struct Color { r: u8, g: u8, b: u8, a: u8 } 

fun rgba(r: u8, g: u8, b: u8, a: u8) -> Color {
    var result: Color;
    result.r = r;
    result.g = g;
    result.b = b;
    result.a = a;
    return result;
}

fun rgb(r: u8, g: u8, b: u8) -> Color {
    return rgba(r, g, b, 0xff);
}

fun u8_move_to(a: u8, b: u8, k: f32) -> u8 {
    if k > 1.0 {
        return b;
    }
    return (a as f32 + (a as f32 - b as f32) * k) as u8;
}

fun(Color) move_to(other: Color, k: f32) -> Color {
    return rgba(
        u8_move_to(self.r, other.r, k),
        u8_move_to(self.g, other.g, k),
        u8_move_to(self.b, other.b, k),
        u8_move_to(self.a, other.a, k)
    );
}

extern(ClearBackground) fun clear_bakground(color: Color) -> void
extern(GetFrameTime) fun get_frame_time() -> f32

extern(DrawCircle) fun _draw_circle(x: i32, y: i32, radius: f32, color: Color) -> void

fun draw_circle(pos: Vec2D, radius: f32, color: Color) -> void {
    _draw_circle(pos.x as i32, pos.y as i32, radius, color);
}

extern(DrawLine) fun _draw_line(x1: i32, y1: i32, x2: i32, y2: i32, color: Color) -> void

fun draw_line(start: Vec2D, end: Vec2D, color: Color) -> void {
    _draw_line(start.x as i32, start.y as i32, end.x as i32, end.y as i32, color);
}

extern(GetMouseX) fun get_mouse_x() -> i32
extern(GetMouseY) fun get_mouse_y() -> i32

fun get_mouse_pos() -> Vec2D {
    return vec2d::new(get_mouse_x() as f32, get_mouse_y() as f32);
}

const MOUSE_BUTTON_LEFT: i32 = 0;

extern(IsMouseButtonPressed) fun is_mouse_button_pressed(button: i32) -> bool

# TODO: debug it
# extern(GetMousePosition) fun get_mouse_pos() -> Vec2D
# EOF without new line
