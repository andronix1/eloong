import "vec2d.hob" as vec2d;

use vec2d::Vec2D;

struct Rect {
    pos: Vec2D,
    size: Vec2D
}

fun new(pos: Vec2D, size: Vec2D) -> Rect {
    var result: Rect;
    result.pos = pos;
    result.size = size;
    return result;
}

fun extend_range(a: *f32, b: *f32, bias: f32) -> void {
    var d = b.* - a.*;
    if d < bias {
        var c = a.* + d / 2.0;
        a.* = c - bias / 2.0;
        b.* = c + bias / 2.0;
    }
}

fun from_diag(a: Vec2D, b: Vec2D) -> Rect {
    if a.x > b.x {
        var t = b.x;
        b.x = a.x;
        a.x = t;
    }
    if a.y > b.y {
        var t = b.y;
        b.y = a.y;
        a.y = t;
    }
    extend_range(&a.x, &b.x, 0.001);
    extend_range(&a.y, &b.y, 0.001);
    return new(a, b.minus(a));
}

fun(Rect) contains(point: Vec2D) -> bool {
    return
        self.pos.x <= point.x && self.pos.x + self.size.x >= point.x &&
        self.pos.y <= point.y && self.pos.y + self.size.y >= point.y;
}
