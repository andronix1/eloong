import "wall.hob" as wall;
import "vec2d.hob" as vec2d;
import "ray.hob" as ray;

use ray::Ray;
use vec2d::Vec2D;
use wall::Wall;

struct Level {
    walls: []Wall
}

fun new(walls: []Wall) -> Level {
    var result: Level;
    result.walls = walls;
    return result;
}

struct RayCastInfo {
    success: bool,
    pos: Vec2D
}

fun Level.ray_cast(what: Ray) -> RayCastInfo {
    var result: RayCastInfo;
    var i = 0;
    result.success = false;
    while i < self.*.walls.length {
        var w = self.*.walls[i];
        var new_cross: Vec2D;
        if w.cross(what, &new_cross) { # TODO: optional
            var cross_vec = new_cross.minus(what.pos);
            if result.success {
                var last_cross_vec = result.pos.minus(what.pos);
                if cross_vec.length() < last_cross_vec.length() {
                    result.pos = new_cross;
                }
            } else {
                result.pos = new_cross;
            }
            result.success = true;
            # TODO: inner path
            var wallp = w.line.offset_on(what.pos);
        }
        i = i + 1;
    }
    return result;
}