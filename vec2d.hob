import "math.hob" as math;

use math::sqrtf;
use math::sinf;
use math::cosf;
use math::acosf;

struct Vec2D {
    x: f32,
    y: f32
}

fun new(x: f32, y: f32) -> Vec2D {
    var result: Vec2D;
    result.x = x;
    result.y = y;
    return result;
}

fun zero() -> Vec2D {
    return new(0.0, 0.0);
}

fun(Vec2D) length() -> f32 {
    return sqrtf(self.x * self.x + self.y * self.y);
}

fun(Vec2D) add(other: Vec2D) -> Vec2D {
    return new(self.x + other.x, self.y + other.y);
}

fun(Vec2D) minus(other: Vec2D) -> Vec2D {
    return new(self.x - other.x, self.y - other.y);
}

fun(Vec2D) mul(k: f32) -> Vec2D {
    return new(self.x * k, self.y * k);
}

fun(Vec2D) norm() -> Vec2D {
    return self.mul(1.0 / self.length());
}

fun(Vec2D) rotate(angle: f32) -> Vec2D {
    return from_angle(self.angle() + angle, self.length());
}

fun from_angle(angle: f32, length: f32) -> Vec2D { 
    return new(cosf(angle), sinf(angle)).mul(length);
}

fun(Vec2D) angle() -> f32 { 
    var angle = acosf(self.x / self.length());
    if self.y < 0.0 {
        angle = 2.0 * 3.1415 - angle;
    }
    return angle;
}

fun(Vec2D) dot(other: Vec2D) -> f32 {
    return self.x * other.x + self.y * other.y;
}

# TODO: rename
fun(Vec2D) collinear(other: Vec2D) -> bool {
    var cos = self.dot(other) / self.length() / other.length();
    return cos > 0.0;
}
